# .github/workflows/cicd-pipeline.yml
# VERSIÓN FINAL Y COMPLETA - Multi-Entorno (main, testing, desarrollo)

name: CI/CD Multi-Entorno con GitOps

on:
  push:
    # --- CORREGIDO: El pipeline ahora se activa para tus ramas específicas ---
    branches: [ "main", "testing", "desarrollo" ]
  pull_request:
    branches: [ "main", "testing", "desarrollo" ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: "us-central1"
  ARTIFACT_REGISTRY_REPO: "farmacia-repo"

jobs:
  # ===================================================================
  # JOB 1: CI - CONSTRUIR Y PUBLICAR IMÁGENES
  # ===================================================================
  # ===================================================================
  # JOB DE PRUEBA: CONSTRUIR Y PUBLICAR IMÁGENES (CON DEPURACIÓN)
  # ===================================================================
  build-and-push:
    name: 1. Construir y Publicar ${{ matrix.service }}
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      matrix:
        # Limitamos la matriz a un solo servicio para que la prueba sea muy rápida
        service: [frontend] 
    steps:
      # --- PASO DE DEPURACIÓN AÑADIDO ---
      - name: 🐞 DEPURACIÓN - Mostrar variables de GitHub
        run: |
          echo "================================================="
          echo "Valor de github.repository: ${{ github.repository }}"
          echo "================================================="

      - uses: actions/checkout@v4
      - name: Autenticar con Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Configurar Docker para Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet
      - name: Determinar ruta del contexto
        id: path-setter
        run: |
          if [[ "${{ matrix.service }}" == "cartservice" ]]; then
            echo "path=./src/cartservice/src" >> $GITHUB_OUTPUT
          else
            echo "path=./src/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi
      - name: Construir y publicar en Google Artifact Registry
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.path-setter.outputs.path }}
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  # ===================================================================
  # JOB 2: CD (PARTE 1) - ACTUALIZAR EL REPOSITORIO DE CONFIGURACIÓN
  # ===================================================================
  update-manifests:
    name: 2. Actualizar Repositorio de Configuración
    runs-on: ubuntu-latest
    needs: build-and-push # Se ejecuta solo si el job anterior es exitoso
    if: github.event_name == 'push' # Y solo si es un push, no en un PR
    steps:
      - name: Clonar el repositorio de manifiestos
        uses: actions/checkout@v4
        with:
          repository: SoniaGuevara/farmacia-mesaura-manifests
          token: ${{ secrets.GIT_OPS_TOKEN }}
          # Clona la rama correcta (desarrollo, testing, o main) dinámicamente
          ref: ${{ github.ref_name }}

      - name: Actualizar la etiqueta de la imagen con Kustomize
        run: |
          IMAGE_PREFIX="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}"
          GIT_SHA="${{ github.sha }}"
          cd kustomize/
          # Este comando actualiza todas las imágenes a la nueva versión
          kustomize edit set image "*/*@*" "$IMAGE_PREFIX/*@$GIT_SHA"

      - name: Realizar commit y push de los cambios de configuración
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions-bot@github.com'
          # Hacemos commit solo si hay cambios reales en los archivos
          if ! git diff --quiet; then
            git commit -am "Deploy [${{ github.ref_name }}]: Actualizar imágenes a la versión ${{ github.sha }}"
            # Hacemos push a la misma rama que activó el workflow
            git push origin ${{ github.ref_name }}
          else
            echo "No hay cambios en los manifiestos para actualizar."
          fi